import os, re, sqlite3
from datetime import datetime

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, ConversationHandler,
    CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters,
)


START, DOCTOR, DATE, TIME, NAME, PHONE = range(6)

DOCTOR_LABELS = {
    "–¢–µ—Ä–∞–ø–µ–≤—Ç": "üë®‚Äç‚öïÔ∏è –¢–µ—Ä–∞–ø–µ–≤—Ç",
    "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥": "ü¶∑ –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥",
    "–û–∫—É–ª–∏—Å—Ç": "üëÅÔ∏è –û–∫—É–ª–∏—Å—Ç",
}

def init_db():
    with sqlite3.connect("appointments.db") as c:
        c.execute(
            "CREATE TABLE IF NOT EXISTS appointments("
            "id INTEGER PRIMARY KEY AUTOINCREMENT,"
            "chat_id INTEGER,"
            "doctor TEXT,"
            "date TEXT,"
            "time TEXT,"
            "name TEXT,"
            "phone TEXT)"
        )
init_db()

load_dotenv("token.env")
TOKEN = os.getenv("TELEGRAM_TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="begin")]]
    )
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Ä–∞—á–∞.",
        reply_markup=kb,
    )
    return START

async def begin_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.edit_message_reply_markup(None)
    kb = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("üë®‚Äç‚öïÔ∏è –¢–µ—Ä–∞–ø–µ–≤—Ç", callback_data="doctor:–¢–µ—Ä–∞–ø–µ–≤—Ç"),
                InlineKeyboardButton("ü¶∑ –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", callback_data="doctor:–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥"),
            ],
            [
                InlineKeyboardButton("üëÅÔ∏è –û–∫—É–ª–∏—Å—Ç", callback_data="doctor:–û–∫—É–ª–∏—Å—Ç"),
                InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
            ],
        ]
    )
    await q.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:", reply_markup=kb)
    return DOCTOR

async def doctor_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.edit_message_reply_markup(None)
    doctor = q.data.split(":", 1)[1]
    context.user_data["doctor"] = doctor
    await q.message.reply_text(f"üë®‚Äç‚öïÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {DOCTOR_LABELS[doctor]}")
    await q.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.06):")
    return DATE

async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_str = update.message.text.strip()
    if not re.fullmatch(r"\d{2}\.\d{2}", date_str):
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 10.06")
        return DATE
    now = datetime.now()
    try:
        date_obj = datetime.strptime(f"{now.year}.{date_str}", "%Y.%d.%m")
    except ValueError:
        await update.message.reply_text("–¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return DATE
    if date_obj.date() < now.date():
        await update.message.reply_text("–ü—Ä–æ—à–µ–¥—à–∞—è –¥–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return DATE
    context.user_data["date"] = date_str
    doctor = context.user_data["doctor"]
    with sqlite3.connect("appointments.db") as c:
        busy = [
            r[0]
            for r in c.execute(
                "SELECT time FROM appointments WHERE doctor=? AND date=?",
                (doctor, date_str),
            )
        ]
    all_slots = ["10:00", "11:00", "12:00", "14:00", "15:00", "16:00"]
    free = [t for t in all_slots if t not in busy]
    if not free:
        await update.message.reply_text("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –≤—Å—ë –∑–∞–Ω—è—Ç–æ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        return DATE
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton(t, callback_data=f"time:{t}")] for t in free]
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)
    return TIME

async def time_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.edit_message_reply_markup(None)
    time_sel = q.data.split(":", 1)[1]
    context.user_data["time"] = time_sel
    await q.message.reply_text(f"‚è∞ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: {time_sel}")
    await q.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–º–æ–∂–Ω–æ —Å +):")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not re.fullmatch(r"\+?\d{10,15}", phone):
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return PHONE
    chat_id = update.effective_chat.id
    u = context.user_data
    with sqlite3.connect("appointments.db") as c:
        c.execute(
            "INSERT INTO appointments(chat_id,doctor,date,time,name,phone) "
            "VALUES (?,?,?,?,?,?)",
            (chat_id, u["doctor"], u["date"], u["time"], u["name"], phone),
        )
    text = (
        "‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        f"{DOCTOR_LABELS[u['doctor']]}\n"
        f"üìÖ –î–∞—Ç–∞: {u['date']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {u['time']}\n"
        f"üôç –ò–º—è: {u['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞", callback_data="begin")]]
    )
    await update.message.reply_text(text, reply_markup=kb)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        q = update.callback_query
        await q.answer()
        await q.edit_message_reply_markup(None)
        await q.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    else:
        await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    conv = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CallbackQueryHandler(begin_registration, "^begin$"),
        ],
        states={
            START: [CallbackQueryHandler(begin_registration, "^begin$")],
            DOCTOR: [CallbackQueryHandler(doctor_chosen, "^doctor:")],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_date)],
            TIME: [CallbackQueryHandler(time_chosen, "^time:")],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CallbackQueryHandler(cancel, "^cancel$"),
        ],
        allow_reentry=True,
    )
    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()
